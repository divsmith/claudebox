#!/bin/bash

# devbox - Creates isolated Claude Code session in Docker container
# ABOUTME: Launches Claude Code with automatic container cleanup

set -e  # Exit on any error

# Cleanup function
cleanup() {
    echo "Cleaning up..."
    rm -f "$SESSION_CLAUDE_JSON" 2>/dev/null || true
    if [ -n "$CONTAINER_NAME" ]; then
        docker stop "$CONTAINER_NAME" 2>/dev/null || true
    fi
}

# Set trap for cleanup on script exit
trap cleanup EXIT

# Variables for cleanup
SESSION_CLAUDE_JSON=""
CONTAINER_NAME=""

# Function to show usage
usage() {
    echo "Usage: devbox [options] [project-directory]"
    echo "  Creates a Docker container running Claude Code"
    echo "  Container is automatically stopped when you exit"
    echo "  If no directory specified, uses current directory"
    echo ""
    echo "Options:"
    echo "  -l, --local    Use local devbox:latest image instead of remote"
    echo ""
    echo "Examples:"
    echo "  devbox ~/code/myproject"
    echo "  devbox ."
    echo "  devbox"
    echo "  devbox --local ~/code/myproject"
    echo "  devbox -l"
    exit 1
}

# Default values
USE_LOCAL_IMAGE=false

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -l|--local)
            USE_LOCAL_IMAGE=true
            shift
            ;;
        -h|--help)
            usage
            ;;
        -*)
            echo "Error: Unknown option $1"
            usage
            ;;
        *)
            if [ -z "$PROJECT_DIR" ]; then
                PROJECT_DIR="$1"
            else
                echo "Error: Multiple project directories specified"
                usage
            fi
            shift
            ;;
    esac
done

# Set default project directory if not specified
if [ -z "$PROJECT_DIR" ]; then
    PROJECT_DIR="$(pwd)"
fi

# Convert to absolute path and resolve any . or .. components
if [[ "$PROJECT_DIR" != /* ]]; then
    PROJECT_DIR="$(pwd)/$PROJECT_DIR"
fi

# Remove trailing slashes and resolve to get the real directory name
PROJECT_DIR="${PROJECT_DIR%/}"
if [[ "$PROJECT_DIR" == "." ]]; then
    PROJECT_DIR="$(pwd)"
fi

# Validate project directory
if [ ! -d "$PROJECT_DIR" ]; then
    echo "Error: Directory '$PROJECT_DIR' does not exist"
    exit 1
fi

# Generate unique names - use pwd to get the actual directory name
DIR_NAME=$(basename "$(realpath "$PROJECT_DIR")")

# Handle dot-prefixed directories by removing the leading dot for naming
CLEAN_DIR_NAME="${DIR_NAME#.}"  # Remove leading dot if present
if [[ "$CLEAN_DIR_NAME" == "$DIR_NAME" ]]; then
    # No dot was removed, use original name
    BASE_CONTAINER_NAME="devbox-$DIR_NAME"
else
    # Dot was removed, use cleaned name
    BASE_CONTAINER_NAME="devbox-$CLEAN_DIR_NAME"
fi

# Generate unique container name with short suffix to support multiple sessions
RANDOM_SUFFIX=$(LC_ALL=C tr -dc 'a-z' < /dev/urandom | head -c 3)
CONTAINER_NAME="${BASE_CONTAINER_NAME}-${RANDOM_SUFFIX}"

echo "Creating Claude Code session for project: $DIR_NAME"
echo "Container name: $CONTAINER_NAME"
echo "Project directory: $PROJECT_DIR"
echo ""
echo "Tip: To list all active devbox sessions, run: docker ps --filter 'name=devbox-'"
echo ""

# Create session-specific claude.json with preferences
SESSION_CLAUDE_JSON="$HOME/.claude_${CONTAINER_NAME}.json"
configure_claude_preferences() {
    local config_file="$1"

    # Create session-specific configuration with preferences
    if [ -f "$HOME/.claude.json" ]; then
        echo "Creating session-specific Claude configuration..."
        cp "$HOME/.claude.json" "$config_file"

        # Add or update preferences while preserving existing config
        echo "Configuring Claude preferences (dark theme, vim mode)..."

        # Use a Python one-liner to merge JSON preferences (more reliable than jq)
        if command -v python3 >/dev/null 2>&1; then
            python3 << EOF
import json
import sys

try:
    with open('$config_file', 'r') as f:
        config = json.load(f)
except:
    config = {}

# Ensure preferences are set
config['theme'] = 'dark'
config['vimMode'] = True

with open('$config_file', 'w') as f:
    json.dump(config, f, indent=2)
EOF
        elif command -v jq >/dev/null 2>&1; then
            # Fallback to jq if Python not available
            jq '. + {theme: "dark", vimMode: true}' "$config_file" > "${config_file}.tmp" && mv "${config_file}.tmp" "$config_file"
        else
            # Last resort: create simple config
            echo '{"theme": "dark", "vimMode": true}' > "$config_file"
        fi
    else
        # Create default session-specific config with preferences
        echo "Creating default Claude configuration with preferences..."
        cat > "$config_file" << 'EOF'
{
  "theme": "dark",
  "vimMode": true
}
EOF
    fi
}

configure_claude_preferences "$SESSION_CLAUDE_JSON"

# Ensure mount sources exist before attempting to mount them
ensure_mount_source() {
    local source_path="$1"
    local description="$2"

    if [ ! -e "$source_path" ]; then
        echo "Creating missing $description: $source_path"
        mkdir -p "$source_path" 2>/dev/null || touch "$source_path" 2>/dev/null || {
            echo "Warning: Could not create $source_path, mount will be skipped"
        }
    fi
}

# Ensure all mount sources exist
ensure_mount_source "$HOME/.claude" "Claude directory"
ensure_mount_source "$SESSION_CLAUDE_JSON" "Claude preferences file"
ensure_mount_source "$HOME/.devbox_env" "DevBox environment file"

# Determine which image to use
if [ "$USE_LOCAL_IMAGE" = true ]; then
    DOCKER_IMAGE="devbox:latest"
    echo "Using local devbox image..."

else
    DOCKER_IMAGE="ghcr.io/divsmith/devbox:latest"
    echo "Using remote devbox image from ghcr.io/divsmith/devbox:latest..."
    echo "Pulling remote devbox image..."
    docker pull ghcr.io/divsmith/devbox:latest
fi

# Always try to allocate a TTY for Claude Code since it's meant to be interactive
TTY_FLAGS="-it"

# Start container and launch Claude Code directly
echo "Starting Docker container and launching Claude Code..."

# Start the container directly
docker run \
    --rm \
    $TTY_FLAGS \
    --entrypoint="" \
    --name "$CONTAINER_NAME" \
    -v "$PROJECT_DIR":/devbox/"$DIR_NAME" \
    --mount type=bind,source=$HOME/.claude,target=/home/devusr/.claude \
    --mount type=bind,source=$SESSION_CLAUDE_JSON,target=/home/devusr/.claude.json \
    --mount type=bind,source=$HOME/.devbox_env,target=/home/devusr/.devbox_env \
    --env-file $HOME/.devbox_env \
    -w "/devbox/$DIR_NAME" \
    $DOCKER_IMAGE \
    claude --dangerously-skip-permissions
