#!/bin/bash

# claudebox - Creates isolated Claude Code session in tmux with Docker container
# ABOUTME: Launches Claude Code in a tmux session with automatic Docker container cleanup

set -e  # Exit on any error

# Function to show usage
usage() {
    echo "Usage: claudebox [project-directory]"
    echo "  Creates a tmux session with Docker container running Claude Code"
    echo "  Container is automatically stopped when tmux session ends"
    echo "  If no directory specified, uses current directory"
    echo ""
    echo "Examples:"
    echo "  claudebox ~/code/myproject"
    echo "  claudebox ."
    echo "  claudebox"
    exit 1
}

# Parse arguments
if [ $# -eq 0 ]; then
    PROJECT_DIR="$(pwd)"
else
    PROJECT_DIR="$1"
fi

# Convert to absolute path and resolve any . or .. components
if [[ "$PROJECT_DIR" != /* ]]; then
    PROJECT_DIR="$(pwd)/$PROJECT_DIR"
fi

# Remove trailing slashes and resolve to get the real directory name
PROJECT_DIR="${PROJECT_DIR%/}"
if [[ "$PROJECT_DIR" == "." ]]; then
    PROJECT_DIR="$(pwd)"
fi

# Validate project directory
if [ ! -d "$PROJECT_DIR" ]; then
    echo "Error: Directory '$PROJECT_DIR' does not exist"
    exit 1
fi

# Generate names - use pwd to get the actual directory name
DIR_NAME=$(basename "$(realpath "$PROJECT_DIR")")

# Handle dot-prefixed directories by removing the leading dot for naming
# Both Docker and tmux have restrictions on starting characters
CLEAN_DIR_NAME="${DIR_NAME#.}"  # Remove leading dot if present
if [[ "$CLEAN_DIR_NAME" == "$DIR_NAME" ]]; then
    # No dot was removed, use original name
    SESSION_NAME="claude-$DIR_NAME"
    CONTAINER_NAME="claudebox-$DIR_NAME"
else
    # Dot was removed, use cleaned name
    SESSION_NAME="claude-$CLEAN_DIR_NAME"
    CONTAINER_NAME="claudebox-$CLEAN_DIR_NAME"
fi

# Check if tmux session already exists
if tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
    echo "Session '$SESSION_NAME' already exists. Attaching..."
    tmux attach -t "$SESSION_NAME"
    exit 0
fi

echo "Creating Claude Code session for project: $DIR_NAME"
echo "Session name: $SESSION_NAME"
echo "Container name: $CONTAINER_NAME"
echo "Project directory: $PROJECT_DIR"
echo ""

# Stop existing container if it exists
echo "Cleaning up any existing container..."
docker stop "$CONTAINER_NAME" 2>/dev/null || true

# Start new container
echo "Starting Docker container..."
docker run --pull=always \
    -d \
    --rm \
    --name "$CONTAINER_NAME" \
    -v "$PROJECT_DIR":/app \
    --mount type=bind,source=$HOME/.claude,target=/home/qwen/.claude \
    --mount type=bind,source=$HOME/.claude.json,target=/home/qwen/.claude.json \
    --mount type=bind,source=$HOME/.private-journal,target=/home/qwen/.private-journal \
    --mount type=bind,source=$HOME/.claudebox_env,target=/home/qwen/.claudebox_env \
    --env-file $HOME/.claudebox_env \
    ghcr.io/divsmith/qwenbox:latest

# Wait for container to be ready
echo "Waiting for container to be ready..."
while ! docker exec "$CONTAINER_NAME" echo "ready" 2>/dev/null; do
    sleep 1
done

# Check for Claude Code CLI updates
echo "Checking for Claude Code CLI updates..."
UPDATE_OUTPUT=$(docker exec "$CONTAINER_NAME" npm outdated -g @anthropic-ai/claude-code 2>/dev/null || echo "")
if [ -n "$UPDATE_OUTPUT" ]; then
    echo "Updating Claude Code CLI..."
    docker exec "$CONTAINER_NAME" sudo npm update -g @anthropic-ai/claude-code
    echo "Claude Code CLI updated successfully"
else
    echo "Claude Code CLI is up to date"
fi

# Create new tmux session
echo "Creating tmux session..."
tmux new-session -d -s "$SESSION_NAME"

# Set up simple cleanup
echo "Setting up cleanup..."
# Simple hook for when session is explicitly killed
tmux set-hook -g session-closed "run-shell 'docker stop $CONTAINER_NAME 2>/dev/null || true'"

# Send commands to start Claude Code - these will execute automatically
# First ensure the config directory and file exist with proper content
tmux send-keys -t "$SESSION_NAME" "docker exec $CONTAINER_NAME bash -c 'mkdir -p ~/.claude && echo \"[claude]\" > ~/.claude/config.toml && echo \"accept-dangerously-skip-permissions = true\" >> ~/.claude/config.toml'" Enter
tmux send-keys -t "$SESSION_NAME" "docker exec -it $CONTAINER_NAME bash -c 'claude --dangerously-skip-permissions'" Enter

# Attach to the session
echo "Attaching to tmux session..."
tmux attach -t "$SESSION_NAME"
